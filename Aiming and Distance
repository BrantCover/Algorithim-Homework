import turtle
import math

#Base game settings
turtle.fd(0)
turtle.speed(0)
turtle.bgcolor("white")
turtle.ht()
turtle.setundobuffer(1)
turtle.tracer(1)
turtle.setup(900,900)

#Class to set up all sprites used in the game
class Sprite(turtle.Turtle):
    def __init__(self, spriteshape, color, startx, starty, heading):
        turtle.Turtle.__init__(self, shape = spriteshape)
        self.speed(0)
        self.penup()
        self.color(color)
        self.fd(0)
        self.goto(startx, starty)
        self.setheading(heading)
        self.speed = 1

    def move(self):
        self.fd(self.speed)

#Collision detection (Wall, Boundry, Boundries, Divider, Collision)
        #Main Wall
        if self.xcor() > 290:
            self.setx(290)
            self.rt(60)
        if self.xcor() < -290:
            self.setx(-290)
            self.rt(60)
        if self.ycor() > 290:
            self.sety(290)
            self.rt(60)
        if self.ycor() < -290:
            self.sety(-290)
            self.rt(60)

        #Tank colliding with tank
    def collide(self, other):
        if (self.xcor() >= (other.xcor() - 10)) and \
            (self.xcor() <= (other.xcor() + 10)) and \
            (self.ycor() <= (other.ycor() + 10)) and \
            (self.ycor() >= (other.ycor() - 10)):
            return True
        else:
            return False

 

#Tank class and controls (Turning, Controls, Bluetank, Redtank, Setup)
#Bluetank class and setup
class Bluetank(Sprite):
     def __init__(self, spriteshape, color, startx, starty, heading):
        Sprite.__init__(self, spriteshape, color, startx, starty, heading)

        self.speed = 0

     def turnblue_left(self):
        self.lt(30)

     def turnblue_right(self):
        self.rt(30)

     def bluespeed(self):
         self.speed += 1

     def blueslow(self):
         self.speed -= 1

     def bluereset(self):
         self.goto(200,200)

    #Aim at the Red Tank
     def blueaim1(self):
         self.setheading(self.towards(redtank))
         print("Angle towards Red tank is ", self.heading()," degrees")
         #find the distance in the X direction
         XRed = (redtank.xcor() - bluetank.xcor())
         #take the absolute value
         XRed1 = math.fabs(XRed)
         #find the distance in the Y 
         YRed = (redtank.ycor() - bluetank.ycor())
         #take the absolute value
         YRed1 = math.fabs(YRed)
         #equate the distance
         RedDistance = ((math.sqrt((XRed1+YRed1)**2)))
         print("Distance to Red tank is ", RedDistance, " pixels")  
         
     #Aim at the Green Tank
     def blueaim2(self):
         self.setheading(self.towards(greentank))
         print("Angle towards Green tank is ", self.heading()," degrees")
         XGreen = (greentank.xcor() - bluetank.xcor())
         XGreen1 = math.fabs(XGreen)
         YGreen = (greentank.ycor() - bluetank.ycor())
         YGreen1 = math.fabs(YGreen)
         GreenDistance = ((math.sqrt((XGreen1+YGreen1)**2)))
         print("Distance to Green tank is ", GreenDistance, " pixels")

     #Aim at the Pink Tank
     def blueaim3(self):
         self.setheading(self.towards(pinktank))
         print("Angle towards Pink tank is ", self.heading()," degrees")
         XPink = (pinktank.xcor() - bluetank.xcor())
         XPink1 = math.fabs(XPink)
         YPink = (pinktank.ycor() - bluetank.ycor())
         YPink1 = math.fabs(YPink)
         PinkDistance = ((math.sqrt((XPink1+YPink1)**2)))
         print("Distance to Pink tank is ", PinkDistance, " pixels")

     #Aim at the Orange Tank
     def blueaim4(self):
         self.setheading(self.towards(orangetank))
         print("Angle towards Orange tank is ", self.heading()," degrees")
         XOrange = (orangetank.xcor() - bluetank.xcor())
         XOrange1 = math.fabs(XOrange)
         YOrange = (orangetank.ycor() - bluetank.ycor())
         YOrange1 = math.fabs(YOrange)
         OrangeDistance = ((math.sqrt((XOrange1+YOrange1)**2)))
         print("Distance to Orange tank is ", OrangeDistance, " pixels")

#Target tank setups
class Redtank(Sprite):
    def __init__(self, spriteshape, color, startx, starty, heading):
        Sprite.__init__(self, spriteshape, color, startx, starty, heading)
        self.speed = 0

    def pinkreset(self):
        self.goto(200, -200)

class Greentank(Sprite):
    def __init__(self, spriteshape, color, startx, starty, heading):
        Sprite.__init__(self, spriteshape, color, startx, starty, heading)
        self.speed = 0

    def greenreset(self):
        self.goto(-200, -200)

class Pinktank(Sprite):
    def __init__(self, spriteshape, color, startx, starty, heading):
        Sprite.__init__(self, spriteshape, color, startx, starty, heading)
        self.speed = 0

    def pinkreset(self):
        self.goto(-200, 200)

class Orangetank(Sprite):
    def __init__(self, spriteshape, color, startx, starty, heading):
        Sprite.__init__(self, spriteshape, color, startx, starty, heading)
        self.speed = 0

    def pinkreset(self):
        self.goto(200, 200)

#Class for graphics (draw boarder, draw wall)
class Game():
    def __init__(self):
        self.state = "playing"
        self.pen = turtle.Turtle()
        self.pen.hideturtle()

    def draw_boarder(self):
        self.pen.speed(0)
        self.pen.color("black")
        self.pen.pensize(3)
        self.pen.penup()
        self.pen.goto(-300,300)
        self.pen.pendown()

        #Main Wall
        for side in range(4):
            self.pen.fd(600)
            self.pen.rt(90)
        self.pen.penup()
        self.pen.ht()

#Make classes into objects
game = Game()
#draw the boarder
game.draw_boarder()

#Create all Sprites
#Tanks
bluetank = Bluetank("classic", "blue" ,0, 0, 180)
redtank = Redtank("classic", "red",200, -200, 135)
greentank = Greentank("classic", "green",-200, 200, 315)
pinktank = Pinktank("classic", "pink", -200, -200, 45)
orangetank = Orangetank("classic", "orange", 200, 200, 225)

#Controls
#Bluetank
turtle.onkey(bluetank.turnblue_left, 'Left')
turtle.onkey(bluetank.turnblue_right, 'Right')
turtle.onkey(bluetank.bluespeed, 'Up')
turtle.onkey(bluetank.blueslow, 'Down')
turtle.onkey(bluetank.blueaim1, '1')
turtle.onkey(bluetank.blueaim2, '2')
turtle.onkey(bluetank.blueaim3, '3')
turtle.onkey(bluetank.blueaim4, '4')
turtle.listen()

#Main game loop
while True:
    bluetank.move()
     #Check for collisions between tanks
    if bluetank.collide(redtank):
        bluetank.goto(0,0)
        redtank.goto(200,-200)

    if bluetank.collide(greentank):
       bluetank.goto(0,0)
       greentank.goto(-200,200)

    if bluetank.collide(pinktank):
        bluetank.goto(0,0)
        pinktank.goto(-200,-200)

    if bluetank.collide(pinktank):
        bluetank.goto(0,0)
        orangetank.goto(200,200)
